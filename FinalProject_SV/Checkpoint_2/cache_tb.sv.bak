module cache_tb;

  // Declare signals for cache
  reg clk;
  reg reset;
  reg [31:0] address;
  reg [1:0] op_type;  // 0: read, 1: write, 2: instruction cache read, etc.
  
  // Instantiate the cache module
  cache uut (
      .clk(clk),
      .reset(reset),
      .address(address),
      .op_type(op_type)
  );
  
  // Trace file handling variables
  integer trace_fd;
  integer trace_event;
  string trace_line;

  // Clock generation
  always begin
    #5 clk = ~clk;  // 100 MHz clock
  end

  // Initialize signals and read trace file
  initial begin
    // Initialize signals
    clk = 0;
    reset = 1;
    address = 32'h0;
    op_type = 2'b00;
    
    // Open the trace file
    trace_fd = $fopen("trace.txt", "r");
    if (trace_fd == 0) begin
        $display("Error: Unable to open trace file.");
        $finish;
    end

    // Apply reset at the start
    #10 reset = 0;
    #10 reset = 1;
    
    // Read the trace file line by line
    while (!$feof(trace_fd)) begin
        // Read a line from the trace file
        trace_event = $fscanf(trace_fd, "%s %h", trace_line, address);
        
        // Handle invalid lines or missing data
        if (trace_event != 2) begin
            $display("Invalid line in trace file.");
            $finish;
        end
        
        // Process the trace event based on the operation type
        case (trace_line)
            "0": begin
                // Read request (from L1 data cache)
                op_type = 2'b00;  // Read operation
                $display("Read request: %h", address);
                // Call your cache's read method here
                uut.cache_read(address);
            end
            
            "1": begin
                // Write request (from L1 data cache)
                op_type = 2'b01;  // Write operation
                $display("Write request: %h", address);
                // Call your cache's write method here
                uut.cache_write(address);
            end
            
            "2": begin
                // Instruction cache read (operation 2)
                op_type = 2'b10;  // Instruction read operation
                $display("Instruction cache read: %h", address);
                // Call your cache's instruction read method here
                uut.cache_read_instruction(address);
            end
            
            "3": begin
                // Snoop read request
                op_type = 2'b00;  // Read operation for snooping
                $display("Snoop read request: %h", address);
                // Call snoop's read method here
                uut.snoop_read(address);
            end
            
            "4": begin
                // Snoop write request
                op_type = 2'b01;  // Write operation for snooping
                $display("Snoop write request: %h", address);
                // Call snoop's write method here
                uut.snoop_write(address);
            end
            
            "5": begin
                // Snoop read with intent to modify
                op_type = 2'b10;  // Read intent to modify operation for snooping
                $display("Snoop read with intent to modify: %h", address);
                // Call snoop's read with intent to modify method here
                uut.snoop_read_intent(address);
            end
            
            "6": begin
                // Snoop invalidate command
                op_type = 2'b00;  // Invalidate operation for snooping
                $display("Snoop invalidate: %h", address);
                // Call snoop's invalidate method here
                uut.snoop_invalidate(address);
            end
            
            "9": begin
                // Print contents of the cache
                $display("Printing cache contents...");
                // Call your cache's print method here to display cache state
                uut.print_cache_contents();
            end
            
            default: begin
                $display("Unknown trace event: %s", trace_line);
            end
        endcase
    end
    
    // Close the trace file
    $fclose(trace_fd);
    
    // End simulation
    $finish;
  end

endmodule